/**
 * Some description..
 */

// TODO: If there is a base we need to include it here.. !
define(['./_project', <%if(this.base){%>, './_project.<%- this.base%>.Dsml' <%}%> ], function (Project, <%if(this.base){%>, <%- this.base%> <%}%>) {
    'use strict';

//TODO: Replace all FCO with actual name. !

    /**
     * Initializes a new instance of <%=name%>.
     *
     * @class
     * @classdesc This class represents a(n) <%=name%>.
     * @property {Project.<%=name%>.Attributes} attributes The attributes of the <%=name%>.
     * @param {object} node - The wrapped CoreNode object.
     * @constructor
     */
    Project.<%=name%> = function (node) {
        this._node = node;
        this.attributes = new Project.<%=name%>.Attributes(this._node);
    };

    /**
     * Initializes a new instance of <%=name%>.Attributes
     *
     * @class
     * @classdesc This class wraps the attributes of <%=name%>.
     * @param {object} node - The wrapped CoreNode object of <%=name%>.
     * @constructor
     */
    Project.<%=name%>.Attributes = function (node) {
        this._node = node;
    };

    /**
     * WebGME node object that represents <%=name%> type.
     * @type {Object}
     * @static
     */
    Project.<%=name%>.Type = null; // Populated at Project.initialize

    /**
     * WebGME node object's meta type ID of <%=name%>.
     * @type {string}
     * @static
     */
    Project.<%=name%>.ID = self.getID();

    /**
     * WebGME node object's meta type GUID of <%=name%>.
     * @type {string}
     * @static
     */
    Project.<%=name%>.GUID = self.getGUID();

    /**
     * Creates a new <%=name%> inside given parent.
     * @returns {Project.<%=name%>} The newly created <%=name%>.
     * @param {Project.<%=name%>} parent Instance where the new <%=name%> should be created.
     * @public
     */
    Project.<%=name%>.createObj = function (parent) {
        var node = Project._core.createNode({parent: parent._node, base: Project.<%=name%>.Type});
        return new Project.<%=name%>(node);
    };

    /**
     * Gets the ID of the <%=name%> instance.
     * @returns {string} The ID.
     * @public
     */
    Project.<%=name%>.prototype.getID = function () {
        return Project._core.getPath(this._node);
    };

    /**
     * Gets the GUID of the <%=name%> instance.
     * @returns {string} The GUID.
     * @public
     */
    Project.<%=name%>.prototype.getGUID = function () {
        return Project._core.getGuid(this._node);
    };

<% for (var attrName in attr) {%>
    // TODO: use correct name and get type from attributes[attrName] etc.
    /**
     * Gets or sets the attribute name of the <%=name%> instance.
     * @param {string} [value] - If defined sets the attribute value to this
     * @returns {string} Currently set name.
     * @public
     */
    Project.<%=name%>.Attributes.prototype.<%=attrName%> = function (value) {
        if (typeof value !== 'undefined') {
            Project._core.setAttribute(this._node, 'name', value);
        }

        return Project._core.getAttribute(this._node, 'name');
    };
<%}%>
    return Project.<%=name%>;
});