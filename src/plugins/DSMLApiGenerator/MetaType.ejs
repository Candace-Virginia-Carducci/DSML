/**
 * Some description..
 */

// TODO: If there is a base we need to include it here.. !
define(['./_project' <%if( base ){%> ,'./<%=base%>.Dsml' <%}%>], function (Project<%if( base ){%>, <%=base%><%}%>) {
    'use strict';

//TODO: Replace all FCO with actual name. !
//TODO: Add Children

    /**
     * Initializes a new instance of <%=name%>.
     *
     * @class
     * @classdesc This class represents a(n) <%=name%>.
     * @property {Project.<%=name%>.Attributes} attributes The attributes of the <%=name%>.
     * @param {object} node - The wrapped CoreNode object.
     * @constructor
     */
    Project.<%=name%> = function (node, skipTypeCheck) {
        <%if (base) { %> <%=base%>.call(this, node, true);<%}%>
        // TODO: Add check that core.getBaseType(node) is the correct one. !

        if(!skipTypeCheck && Project._core.getBaseType(node) !== Project.<%=name%>.Type){
           throw new TypeError("Wrong Type");
        }
        this._node = node;
        this.attributes = new Project.<%=name%>.Attributes(this._node);
        this.children = new Project.<%=name%>.Children(this._node);
    };

    /**
     * Initializes a new instance of <%=name%>.Attributes
     *
     * @class
     * @classdesc This class wraps the attributes of <%=name%>.
     * @param {object} node - The wrapped CoreNode object of <%=name%>.
     * @constructor
     */
    Project.<%=name%>.Attributes = function (node) {
        <%if (base) { %><%=base%>.Attributes.call(this,node);<%}%>
        this._node = node;
    };

    /**
    * Initializes a new instance of <%=name%>.Attributes
    *
    * @class
    * @classdesc This class wraps the attributes of <%=name%>.
    * @param {object} node - The wrapped CoreNode object of <%=name%>.
    * @constructor
    */
    Project.<%=name%>.Children = function (node) {
        <%if (base) { %><%=base%>.Children.call(this,node);<%}%>
        this._node = node;
    };

<%if (base) { %>
    Project.<%=name%>.prototype = Object.create(<%=base%>.prototype);
    Project.<%=name%>.prototype.constructor = Project.<%=name%>;

    Project.<%=name%>.Attributes.prototype = Object.create(<%=base%>.Attributes.prototype);
    Project.<%=name%>.Attributes.prototype.constructor = Project.<%=name%>.Attributes;

    Project.<%=name%>.Children.prototype = Object.create(<%=base%>.Children.prototype);
    Project.<%=name%>.Children.prototype.constructor = Project.<%=name%>.Children;
<%}%>

    /**
     * WebGME node object that represents <%=name%> type.
     * @type {Object}
     * @static
     */
    Project.<%=name%>.Type =  null; // Populated at Project.initialize

    /**
     * WebGME node object's meta type ID of <%=name%>.
     * @type {string}
     * @static
     */
    Project.<%=name%>.ID = "/<%=location.relid%>";

    /**
     * WebGME node object's meta type GUID of <%=name%>.
     * @type {string}
     * @static
     */
    Project.<%=name%>.GUID = "<%=location.guid%>";

    /**
     * Creates a new <%=name%> inside given parent.
     * @returns {Project.<%=name%>} The newly created <%=name%>.
     * @param {Project.<%=name%>} parent Instance where the new <%=name%> should be created.
     * @public
     */
    Project.<%=name%>.createObj = function (parent) {
        var node = Project._core.createNode({parent: parent.node, base: Project.<%=name%>.Type});
        return new Project.<%=name%>(node);
    };

    /**
     * Gets the ID of the <%=name%> instance.
     * @returns {string} The ID.
     * @public
     */
    Project.<%=name%>.prototype.getID = function () {
        return Project._core.getPath(this._node);
    };

    /**
     * Gets the GUID of the <%=name%> instance.
     * @returns {string} The GUID.
     * @public
     */
    Project.<%=name%>.prototype.getGUID = function () {
        return Project._core.getGuid(this._node);
    };

// TODO: For each derived type add
   /**
    * Downcast emulation
    * @returns {Project.METATYPE} The node as an Project.METATYPE.
    * @public
    */
    Project.<%=name%>.prototype.asMETATYPE = function () {

        return this;
    };

<% for (var attrName in attr) {%>
    /**
     * Gets or sets the attribute name of the <%=name%> instance.
     * @param {<%=attr[attrName].type%>} [value] - If defined sets the attribute value to this
     * @returns {string} Currently set name.
     * @public
     */
    Project.<%=name%>.Attributes.prototype.<%=attrName%> = function (value) {
        if (typeof value !== 'undefined') {
            Project._core.setAttribute(this._node, '<%=attrName%>', value);
        }

        return Project._core.getAttribute(this._node, '<%=attrName%>');
    };
<%}%>


// TODO: Children.prototype.METATYPE for each valid child type !
<%for (var c = 0; c < children.length; c += 1) {
    var bambinoName = pathMap[children[c]];
%>
    <% if(children[c].isAbstract){
       continue;
   }%>
    /**
    * Get all children of <%=bambinoName%> type (including derived types).
    * @returns {Project.<%=bambinoName%>} Currently set name.
    * @public
    */
    Project.<%=name%>.Children.prototype.<%=bambinoName%> = function () {
        // 1. getChildrenPaths
        var childrenPaths = Project._core.getChildrenPaths(this._node);
        // 2. get the actual nodes using Project._nodes
        var childNodes = [];
        for(var x=0; x < childrenPaths.length; x+=1){
            for (var y=0; y < Project._nodes.length; y+=1){
                if(childrensPaths[x] === Project._core.getPath(Project._nodes[y])){
                    childNodes.push(Project._nodes[y]);
                }
            }
        }
        // 3. create DSML-node based on meta-type.
        var dsmlNodes = [];
        for(var d=0; d < childNodes.length; d+=1){
            if(childNodes[d] instanceof <%=bambinoName%>){
                dsmlNodes.push(new Project[childNodes[d]](this_.node));
            }
        }

        // 4. return all DSML-nodes that are "instanceof" bambinoName

        return dsmlNodes;
    };
<%}%>

    /**
    * Gets the children of the <%=name%> instance.
    * @returns {'<%=children%>'} Currently get children.
    * @public
    */
    Project.<%=name%>.prototype.getFCOChildren = function () {
        <%var bambini = []; %>
       <%for (var z = 0; z < children.length; z += 1) {
           bambini.push(pathMap[children[z]]);
       %>
        <%}%>
        return ['<%=bambini%>'];
    };


    return Project.<%=name%>;


});